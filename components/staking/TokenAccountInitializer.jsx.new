import React, { useState, useEffect } from "react";
import { useWallet } from "@solana/wallet-adapter-react";
import { Transaction } from "@solana/web3.js";
import { GlassButton, SecondaryButton } from "../Buttons";

/**
 * Enhanced Token Account Initializer Component
 * This component handles the token account initialization process
 * before staking an NFT to ensure the token account is properly initialized.
 * Includes additional error handling and diagnostic information.
 */
const TokenAccountInitializer = ({ 
  mintAddress, 
  onSuccess, 
  onError,
  onCancel,
  showDetails = false
}) => {
  const { publicKey, signTransaction, connected } = useWallet();
  const [isInitializing, setIsInitializing] = useState(false);
  const [error, setError] = useState(null);
  const [status, setStatus] = useState("idle"); // idle, checking, initializing, success, error
  const [diagnosticInfo, setDiagnosticInfo] = useState(null);

  useEffect(() => {
    // Clear previous errors when component rerenders with new mintAddress
    setError(null);
    setStatus("idle");
    setDiagnosticInfo(null);
  }, [mintAddress]);

  // Initialize token account
  const handleInitializeTokenAccount = async () => {
    if (!connected || !publicKey || !mintAddress) {
      setError("Wallet not connected or NFT not selected");
      return;
    }

    try {
      setIsInitializing(true);
      setStatus("checking");
      setError(null);

      // Step 1: First, check token account status with diagnostics
      const diagnosticResponse = await fetch("/api/staking/diagnose", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          wallet: publicKey.toString(),
          mintAddress: mintAddress
        }),
      });

      if (!diagnosticResponse.ok) {
        const errorData = await diagnosticResponse.json();
        throw new Error(errorData.error || "Failed to check token account status");
      }

      const diagData = await diagnosticResponse.json();
      setDiagnosticInfo(diagData.data);

      console.log("Token Account Diagnostic:", diagData.data);

      // If token account is already properly initialized, we can proceed to staking
      if (diagData.data.isValid) {
        console.log("Token account already initialized and valid, proceeding to staking");
        setStatus("success");

        // Call the success callback to continue with staking
        if (onSuccess) {
          onSuccess({
            userTokenAccount: diagData.data.userTokenAccount,
            message: "Token account already initialized and valid",
            diagnosticInfo: diagData.data
          });
        }
        return;
      }

      // Step 2: If initialization is needed, send the initialization transaction
      setStatus("initializing");

      // Call the enhanced token account initialization endpoint
      const initResponse = await fetch("/api/staking/initializeTokenAccount", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          wallet: publicKey.toString(),
          mintAddress: mintAddress,
          includeValidation: true,
          forceRecreate: !diagData.data.accountExists // Force recreation if account doesn't exist
        }),
      });

      if (!initResponse.ok) {
        const errorData = await initResponse.json();
        throw new Error(errorData.error || "Failed to prepare token account initialization");
      }

      const initData = await initResponse.json();
      
      // If token account is already properly initialized, we can proceed to staking
      if (!initData.data.needsInitialization) {
        console.log("Token account already initialized, proceeding to staking");
        setStatus("success");

        // Call the success callback to continue with staking
        if (onSuccess) {
          onSuccess({
            userTokenAccount: initData.data.userTokenAccount,
            message: "Token account already initialized",
            diagnosticInfo: initData.data.diagnosticInfo
          });
        }
        return;
      }

      // Get the transaction from the response
      const txBase64 = initData.data.transactionBase64;
      const txBuffer = Buffer.from(txBase64, "base64");

      // Deserialize and sign the transaction
      const transaction = Transaction.from(txBuffer);
      const signedTx = await signTransaction(transaction);

      // Serialize the signed transaction
      const serializedTx = signedTx.serialize();

      // Step 3: Submit the signed transaction to initialize the token account
      const submitResponse = await fetch("/api/staking/submitTransaction", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          transaction: Buffer.from(serializedTx).toString("base64"),
          type: "token_account_initialization"
        }),
      });

      let submitData;
      let initializationSuccess = false;

      if (!submitResponse.ok) {
        console.warn("Standard initialization failed, trying direct initialization method");

        // If standard initialization fails, try the direct initialization method
        setStatus("alternate_init");

        // Call the direct initialization endpoint
        const directInitResponse = await fetch("/api/staking/directTokenInitialize", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            wallet: publicKey.toString(),
            mintAddress: mintAddress,
            forceRecreate: true
          }),
        });

        if (!directInitResponse.ok) {
          const errorData = await directInitResponse.json();
          throw new Error(errorData.error || "Failed to prepare direct token account initialization");
        }

        const directInitData = await directInitResponse.json();

        // Sign the direct initialization transaction
        const directTxBuffer = Buffer.from(directInitData.data.transactionBase64, "base64");
        const directTransaction = Transaction.from(directTxBuffer);
        const signedDirectTx = await signTransaction(directTransaction);

        // Submit the direct initialization transaction
        const directSubmitResponse = await fetch("/api/staking/submitTransaction", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            transaction: Buffer.from(signedDirectTx.serialize()).toString("base64"),
            type: "direct_token_initialization"
          }),
        });

        if (!directSubmitResponse.ok) {
          const errorData = await directSubmitResponse.json();
          throw new Error(errorData.error || "Failed to submit direct token account initialization");
        }

        submitData = await directSubmitResponse.json();
        initializationSuccess = true;
      } else {
        submitData = await submitResponse.json();
        initializationSuccess = true;
      }

      if (!initializationSuccess) {
        throw new Error("Both standard and direct token account initialization methods failed");
      }

      // Step 4: Wait a moment for the transaction to be confirmed
      setStatus("waiting");
      await new Promise(resolve => setTimeout(resolve, 5000));

      // Step 5: Verify the initialization by checking token account status again
      const verifyResponse = await fetch("/api/staking/diagnose", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          wallet: publicKey.toString(),
          mintAddress: mintAddress
        }),
      });

      if (!verifyResponse.ok) {
        const errorData = await verifyResponse.json();
        throw new Error(errorData.error || "Failed to verify token account initialization");
      }

      const verifyData = await verifyResponse.json();
      setDiagnosticInfo(verifyData.data);

      if (!verifyData.data.isValid) {
        throw new Error("Token account initialization failed verification: " + 
          (verifyData.data.diagnosticInfo?.errorMessage || "Unknown error"));
      }

      // Step 6: Verification is complete, token account should be initialized
      setStatus("success");

      // Call the success callback to continue with staking
      if (onSuccess) {
        onSuccess({
          userTokenAccount: verifyData.data.userTokenAccount,
          txSignature: submitData.data.signature,
          message: "Token account successfully initialized",
          diagnosticInfo: verifyData.data
        });
      }

    } catch (err) {
      console.error("Token account initialization error:", err);
      setError(err.message || "Failed to initialize token account");
      setStatus("error");

      // Call the error callback
      if (onError) {
        onError(err);
      }
    } finally {
      setIsInitializing(false);
    }
  };

  // Render loading states with appropriate messaging
  const renderStatus = () => {
    switch(status) {
      case "checking":
        return (
          <div className="animate-pulse flex items-center">
            <svg className="animate-spin h-5 w-5 mr-2 text-blue-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
              <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
              <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            Checking token account status...
          </div>
        );
      case "initializing":
        return (
          <div className="animate-pulse flex items-center">
            <svg className="animate-spin h-5 w-5 mr-2 text-purple-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
              <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
              <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            Initializing token account...
          </div>
        );
      case "alternate_init":
        return (
          <div className="animate-pulse flex items-center">
            <svg className="animate-spin h-5 w-5 mr-2 text-orange-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
              <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
              <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            Trying alternative initialization method...
          </div>
        );
      case "waiting":
        return (
          <div className="animate-pulse flex items-center">
            <svg className="animate-spin h-5 w-5 mr-2 text-yellow-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
              <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
              <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            Waiting for confirmation...
          </div>
        );
      case "success":
        return (
          <div className="flex items-center text-green-400">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
              <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
            </svg>
            Token account is ready for staking
          </div>
        );
      case "error":
        return (
          <div className="flex items-center text-red-400">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
              <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
            </svg>
            Token account initialization failed
          </div>
        );
      default:
        return null;
    }
  };

  // Render diagnostic information when showDetails is true
  const renderDiagnostics = () => {
    if (!showDetails || !diagnosticInfo) return null;

    return (
      <div className="mt-4 p-3 bg-gray-800/50 rounded-lg text-xs font-mono overflow-auto max-h-32">
        <h4 className="text-xs font-semibold text-gray-300 mb-1">Diagnostic Information</h4>
        <div className="text-gray-400">
          <div>Token Account: {diagnosticInfo.userTokenAccount}</div>
          <div>Valid: {diagnosticInfo.isValid ? "Yes" : "No"}</div>
          <div>Exists: {diagnosticInfo.accountExists ? "Yes" : "No"}</div>
          <div>Has Token: {diagnosticInfo.hasToken ? "Yes" : "No"}</div>
          <div>Correct Owner: {diagnosticInfo.hasCorrectOwner ? "Yes" : "No"}</div>
          <div>Correct Mint: {diagnosticInfo.hasCorrectMint ? "Yes" : "No"}</div>
          {diagnosticInfo.diagnosticInfo?.errorMessage && (
            <div className="text-red-400 mt-1">Error: {diagnosticInfo.diagnosticInfo.errorMessage}</div>
          )}
        </div>
      </div>
    );
  };

  return (
    <div className="bg-gray-800/70 backdrop-blur-sm border border-purple-500/20 rounded-xl p-6 max-w-lg mx-auto">
      <div className="flex items-center mb-4">
        <div className="bg-purple-500/20 p-2 rounded-full mr-3">
          <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-purple-400" viewBox="0 0 20 20" fill="currentColor">
            <path fillRule="evenodd" d="M4 4a2 2 0 00-2 2v4a2 2 0 002 2V6h10a2 2 0 00-2-2H4zm2 6a2 2 0 012-2h8a2 2 0 012 2v4a2 2 0 01-2 2H8a2 2 0 01-2-2v-4zm6 4a2 2 0 100-4 2 2 0 000 4z" clipRule="evenodd" />
          </svg>
        </div>
        <h3 className="text-xl font-bold text-white">Prepare Token Account</h3>
      </div>
      
      <div className="mb-6 text-gray-300">
        <p className="mb-3">
          Before staking your NFT, we need to ensure your token account is properly initialized on the blockchain.
          This is a one-time setup for each NFT you want to stake.
        </p>
        <p>
          This process requires a small transaction to be signed by your wallet.
          The transaction has minimal network fees and ensures your staking process will work correctly.
        </p>
      </div>
      
      {status !== "idle" && (
        <div className="bg-gray-900/50 rounded-lg p-4 mb-4">
          {renderStatus()}
          
          {error && (
            <div className="mt-2 text-sm text-red-400">
              Error: {error}
            </div>
          )}
        </div>
      )}
      
      {renderDiagnostics()}
      
      <div className="flex justify-end space-x-3 mt-4">
        <SecondaryButton
          onClick={onCancel}
          disabled={isInitializing}
        >
          Cancel
        </SecondaryButton>
        
        <GlassButton
          onClick={handleInitializeTokenAccount}
          disabled={isInitializing || status === "success"}
        >
          {status === "success" ? "Ready to Stake" : "Initialize Token Account"}
        </GlassButton>
      </div>
    </div>
  );
};

export default TokenAccountInitializer;